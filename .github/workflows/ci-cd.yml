name: Asthma Disease Prediction CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install joblib scikit-learn pandas numpy streamlit
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests

  model-validation:
    name: ML Model Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install joblib scikit-learn pandas numpy
    
    - name: Validate model files
      run: |
        python -c "
        import joblib
        import os
        
        model_file = 'asthma_severity_model.joblib'
        if os.path.exists(model_file):
            try:
                model = joblib.load(model_file)
                print(f'SUCCESS: Model loaded - Type: {type(model).__name__}')
            except Exception as e:
                print(f'ERROR: Model loading failed: {e}')
                exit(1)
        else:
            print('INFO: Model file not found - may need training')
        "
    
    - name: Test model prediction pipeline
      run: |
        python -c "
        from src.utils import validate_asthma_input, calculate_risk_factors, interpret_severity_prediction
        
        # Test utilities work correctly
        test_data = {
            'Age': 35, 'Gender': 1, 'BMI': 25.0, 'Smoking': 0,
            'PhysicalActivity': 7, 'DietQuality': 8, 'SleepQuality': 7,
            'PollutionExposure': 3
        }
        
        is_valid, msg = validate_asthma_input(test_data)
        print(f'Validation: {is_valid} - {msg}')
        
        risk_factors = calculate_risk_factors(test_data)
        print(f'Risk factors: {risk_factors}')
        
        interpretation = interpret_severity_prediction(0, 0.85)
        print(f'Interpretation: {interpretation[\"severity_level\"]}')
        
        print('SUCCESS: All utilities working correctly')
        "

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        safety check || echo "Security vulnerabilities found"
    
    - name: Run bandit security linter
      run: |
        bandit -r src/ *.py -f json || echo "Security analysis completed"